#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 3
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor,
#  Boston, MA  02110-1301, USA.

# This file is autogenerated by the command `make fix-copies`, do not edit.
# flake8: noqa
from ..utils import DummyObject, requires_backends


CONDITIONAL_DETR_PRETRAINED_MODEL_ARCHIVE_LIST = None


class ConditionalDetrForObjectDetection(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class ConditionalDetrForSegmentation(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class ConditionalDetrModel(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class ConditionalDetrPreTrainedModel(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


DEFORMABLE_DETR_PRETRAINED_MODEL_ARCHIVE_LIST = None


class DeformableDetrForObjectDetection(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class DeformableDetrModel(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class DeformableDetrPreTrainedModel(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


DETR_PRETRAINED_MODEL_ARCHIVE_LIST = None


class DetrForObjectDetection(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class DetrForSegmentation(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class DetrModel(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class DetrPreTrainedModel(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


TABLE_TRANSFORMER_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TableTransformerForObjectDetection(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class TableTransformerModel(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])


class TableTransformerPreTrainedModel(metaclass=DummyObject):
    _backends = ["timm", "vision"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["timm", "vision"])
